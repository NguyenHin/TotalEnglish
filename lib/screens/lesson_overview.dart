import 'package:flutter/material.dart';
import 'package:total_english/widgets/lesson_menu.dart';

class LessonOverview extends StatefulWidget {
  final String lessonId;
  final String lessonTitle;
  final String lessonDescription;
  final IconData lessonIcon; // Th√™m tham s·ªë cho icon
  final Color lessonColor; // Th√™m tham s·ªë cho m√†u s·∫Øc
  final Function(Map<String, bool> completedActivities)? onLessonOverviewPop; // Callback khi LessonOverview b·ªã pop

  const LessonOverview({
    super.key,
    required this.lessonId,
    required this.lessonTitle,
    required this.lessonDescription,
    required this.lessonIcon,
    required this.lessonColor,
    this.onLessonOverviewPop,
  });

  @override
  _LessonOverviewState createState() => _LessonOverviewState();
}

class _LessonOverviewState extends State<LessonOverview> {
  Map<String, bool> _completedActivities = {};

  // Callback ƒë∆∞·ª£c g·ªçi t·ª´ LessonMenu khi m·ªôt ho·∫°t ƒë·ªông ho√†n th√†nh
  void _handleActivityCompleted(String activity, bool isCompleted) {
    setState(() {
      _completedActivities[activity] = isCompleted;
      print("Ti·∫øn ƒë·ªô c·∫≠p nh·∫≠t: $_completedActivities"); // In log ƒë·ªÉ theo d√µi
    });
  }

  Future<void> _onPop() async {
    if (widget.onLessonOverviewPop != null) {
      widget.onLessonOverviewPop!(_completedActivities);
    }
    Navigator.pop(context, _completedActivities);
  }



  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: false, // Ch·∫∑n pop m·∫∑c ƒë·ªãnh
      onPopInvoked: (didPop) {
        if (didPop) return; // N·∫øu ƒë√£ pop r·ªìi th√¨ kh√¥ng l√†m g√¨

        print("üéØ LessonOverview: PopScope b·ªã g·ªçi - ƒëang g·ªçi _onPop()");
        _onPop(); // T·ª± g·ªçi logic pop c√≥ result
      },
      child: GestureDetector(
        onTap: () => FocusScope.of(context).unfocus(),
        child: Scaffold(
          backgroundColor: const Color(0xFFFFFFFF),
          resizeToAvoidBottomInset: false,
          body: Stack(
            children: [
              _buildBackButton(context),
              _buildLessonOverviewForm(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildBackButton(BuildContext context) {
    return Positioned(
      left: 10,
      top: 50,
      child: IconButton(
        onPressed: () {
          // G·ªçi callback onLessonOverviewPop tr∆∞·ªõc khi pop
          if (widget.onLessonOverviewPop != null) {
            widget.onLessonOverviewPop!(_completedActivities);
          }
          Navigator.pop(context, _completedActivities); // Tr·∫£ v·ªÅ map ti·∫øn ƒë·ªô
        },
        icon: const Icon(Icons.chevron_left, size: 28),
      ),
    );
  }

  Widget _buildLessonOverviewForm() {
    return Positioned(
      top: 141,
      left: 22,
      right: 22,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Ti√™u ƒë·ªÅ b√†i h·ªçc v·ªõi icon v√† m√†u s·∫Øc
          Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Container(
                width: 60,
                height: 60,
                decoration: BoxDecoration(
                  color: widget.lessonColor, // S·ª≠ d·ª•ng m√†u s·∫Øc ƒë∆∞·ª£c truy·ªÅn v√†o
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(widget.lessonIcon, size: 40, color: Colors.white), // S·ª≠ d·ª•ng icon ƒë∆∞·ª£c truy·ªÅn v√†o
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  widget.lessonTitle,
                  style: const TextStyle(
                    color: Colors.black,
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 24),

          // Menu b√†i h·ªçc (kh√¥ng thay ƒë·ªïi m√†u v√† icon c·ªßa LessonMenu)
          LessonMenu(
            lessonId: widget.lessonId,
            onActivityCompleted: _handleActivityCompleted, // Truy·ªÅn callback ƒë·ªÉ nh·∫≠n th√¥ng tin ho√†n th√†nh
          ),
        ],
      ),
    );
  }
}