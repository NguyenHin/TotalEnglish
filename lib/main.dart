import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';

import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:total_english/screens/login_screen.dart';
import 'package:total_english/screens/home_screen.dart';
//import 'package:total_english/services/otp_service.dart'; // Import OTPService

// Khai b√°o RouteObserver
final RouteObserver<ModalRoute<void>> routeObserver = RouteObserver<ModalRoute<void>>();
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

final AndroidNotificationChannel channel = AndroidNotificationChannel(
  'high_importance_channel', // ID channel ph·∫£i tr√πng v·ªõi ID b·∫°n d√πng ƒë·ªÉ show notification
  'Th√¥ng b√°o quan tr·ªçng', // T√™n channel s·∫Ω hi·ªán trong c√†i ƒë·∫∑t Android
  description: 'K√™nh ƒë·ªÉ g·ª≠i c√°c th√¥ng b√°o quan tr·ªçng c·ªßa app',
  importance: Importance.high,
);


// ‚úÖ H√†m x·ª≠ l√Ω th√¥ng b√°o n·ªÅn
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();
  print("üì• [Background] Message received: ${message.notification?.title}");
}

Future<void> main () async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();

  await _initializeNotifications();     // ‚úÖ th√™m d√≤ng n√†y
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler); // ‚úÖ ch·∫°y khi app t·∫Øt
  _setupFirebaseMessagingListener();    // ‚úÖ v√† d√≤ng n√†y

  
  //OTPService.configOTP(); // C·∫•u h√¨nh OTPService khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
  
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  Future<FirebaseApp> _initializeFirebase() async {
    return await Firebase.initializeApp();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: FutureBuilder(
        future: _initializeFirebase(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Scaffold(
              body: Center(child: CircularProgressIndicator()),
            );
          } else if (snapshot.hasError) {
            return const Scaffold(
              body: Center(child: Text("L·ªói khi kh·ªüi t·∫°o Firebase")),
            );
          } else {
            // Firebase ƒë√£ kh·ªüi t·∫°o xong
            User? user = FirebaseAuth.instance.currentUser;

            if (user != null) {
              return const HomeScreen();
            } else {
              return const LoginScreen();
            }
          }
        },
      ),
      // Th√™m routeObserver v√†o navigatorObservers
      navigatorObservers: [routeObserver],
    );
  }
}


Future<void> _initializeNotifications() async {
  // T·∫°o channel tr√™n Android (n·∫øu c√≥)
  await flutterLocalNotificationsPlugin
      .resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>()
      ?.createNotificationChannel(channel);

  // C√†i ƒë·∫∑t kh·ªüi t·∫°o cho Android
  const AndroidInitializationSettings initializationSettingsAndroid =
      AndroidInitializationSettings('@mipmap/ic_launcher');

  // T·ªïng h·ª£p c√°c c√†i ƒë·∫∑t
  const InitializationSettings initializationSettings =
      InitializationSettings(android: initializationSettingsAndroid);

  // Kh·ªüi t·∫°o flutter local notifications plugin v·ªõi c√†i ƒë·∫∑t tr√™n
  await flutterLocalNotificationsPlugin.initialize(initializationSettings);
}

void _setupFirebaseMessagingListener() {
  FirebaseMessaging.onMessage.listen((RemoteMessage message) {
    RemoteNotification? notification = message.notification;
    AndroidNotification? android = message.notification?.android;

    if (notification != null && android != null) {
      flutterLocalNotificationsPlugin.show(
        notification.hashCode,
        notification.title,
        notification.body,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'high_importance_channel', // Ph·∫£i tr√πng v·ªõi channel ID khai b√°o tr√™n
            'Th√¥ng b√°o quan tr·ªçng', 
            importance: Importance.high,
            priority: Priority.high,
          ),
        ),

      );
    }
  });
}

